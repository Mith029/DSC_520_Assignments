accuracy_Tri[index] <- 100*sum(test_Trinary$label == kModBin)/NROW(test_Trinary$label)
}
accuracy_df <- cbind(accuracy_df,accuracy_Tri)
View(accuracy_df)
set.seed(11)
library(caret)
library(class)
## Binary classifier
training_Index=createDataPartition(binary_df$label, p=0.8)$Resample1
train_Binary= binary_df[training_Index,]
test_Binary= binary_df[-training_Index,]
k_number = c(3, 5, 10, 15, 20, 25)
accuracy_Bin <- c()
index = 0
for (i in k_number) {
index = index + 1
kModBin <- knn(train= train_Binary, test=test_Binary, cl=train_Binary$label, k=i )
accuracy_Bin[index] <- 100*sum(test_Binary$label == kModBin)/NROW(test_Binary$label)
}
accuracy_df <- data.frame(k_number,accuracy_Bin)
## Trinary classifier
train_Index =createDataPartition(trinary_df$label, p=0.8)$Resample1
train_Trinary= trinary_df[train_Index,]
test_Trinary= trinary_df[-train_Index,]
accuracy_Tri <- c()
index = 0
for (i in k_number) {
index = index + 1
kModBin <- knn(train= train_Trinary, test=test_Trinary, cl=train_Trinary$label, k=i )
accuracy_Tri[index] <- 100*sum(test_Trinary$label == kModBin)/NROW(test_Trinary$label)
}
accuracy_df <- cbind(accuracy_df,accuracy_Tri)
View(accuracy_df)
set.seed(12)
library(caret)
library(class)
## Binary classifier
training_Index=createDataPartition(binary_df$label, p=0.8)$Resample1
train_Binary= binary_df[training_Index,]
test_Binary= binary_df[-training_Index,]
k_number = c(3, 5, 10, 15, 20, 25)
accuracy_Bin <- c()
index = 0
for (i in k_number) {
index = index + 1
kModBin <- knn(train= train_Binary, test=test_Binary, cl=train_Binary$label, k=i )
accuracy_Bin[index] <- 100*sum(test_Binary$label == kModBin)/NROW(test_Binary$label)
}
accuracy_df <- data.frame(k_number,accuracy_Bin)
## Trinary classifier
train_Index =createDataPartition(trinary_df$label, p=0.8)$Resample1
train_Trinary= trinary_df[train_Index,]
test_Trinary= trinary_df[-train_Index,]
accuracy_Tri <- c()
index = 0
for (i in k_number) {
index = index + 1
kModBin <- knn(train= train_Trinary, test=test_Trinary, cl=train_Trinary$label, k=i )
accuracy_Tri[index] <- 100*sum(test_Trinary$label == kModBin)/NROW(test_Trinary$label)
}
accuracy_df <- cbind(accuracy_df,accuracy_Tri)
View(accuracy_df)
set.seed(12)
library(caret)
library(class)
## Binary classifier
training_Index=createDataPartition(binary_df$label, p=0.8)$Resample1
train_Binary= binary_df[training_Index,]
test_Binary= binary_df[-training_Index,]
k_number = c(3, 5, 10, 15, 20, 25)
accuracy_Bin <- c()
index = 0
for (i in k_number) {
index = index + 1
kModBin <- knn(train= train_Binary, test=test_Binary, cl=train_Binary$label, k=i )
accuracy_Bin[index] <- 100*sum(test_Binary$label == kModBin)/NROW(test_Binary$label)
}
accuracy_df <- data.frame(k_number,accuracy_Bin)
## Trinary classifier
train_Index =createDataPartition(trinary_df$label, p=0.8)$Resample1
train_Trinary= trinary_df[train_Index,]
test_Trinary= trinary_df[-train_Index,]
accuracy_Tri <- c()
index = 0
for (i in k_number) {
index = index + 1
kModBin <- knn(train= train_Trinary, test=test_Trinary, cl=train_Trinary$label, k=i )
accuracy_Tri[index] <- 100*sum(test_Trinary$label == kModBin)/NROW(test_Trinary$label)
}
accuracy_df <- cbind(accuracy_df,accuracy_Tri)
View(accuracy_df)
set.seed(12)
library(caret)
library(class)
## Binary classifier
training_Index=createDataPartition(binary_df$label, p=0.8)$Resample1
train_Binary= binary_df[training_Index,]
test_Binary= binary_df[-training_Index,]
k_number = c(3, 5, 10, 15, 20, 25)
accuracy_Bin <- c()
index = 0
for (i in k_number) {
index = index + 1
kModBin <- knn(train= train_Binary, test=test_Binary, cl=train_Binary$label, k=i )
accuracy_Bin[index] <- 100*sum(test_Binary$label == kModBin)/NROW(test_Binary$label)
}
accuracy_df <- data.frame(k_number,accuracy_Bin)
## Trinary classifier
train_Index =createDataPartition(trinary_df$label, p=0.8)$Resample1
train_Trinary= trinary_df[train_Index,]
test_Trinary= trinary_df[-train_Index,]
accuracy_Tri <- c()
index = 0
for (i in k_number) {
index = index + 1
kModBin <- knn(train= train_Trinary, test=test_Trinary, cl=train_Trinary$label, k=i )
accuracy_Tri[index] <- 100*sum(test_Trinary$label == kModBin)/NROW(test_Trinary$label)
}
accuracy_df <- cbind(accuracy_df,accuracy_Tri)
head(accuracy_df)
plot(k_number,accuracy_Bin, col='red', pch=19)
library(tidyverse)
binary_df <- read.csv("binary-classifier-data.csv")
trinary_df <- read.csv("trinary-classifier-data.csv")
ggplot(binary_df, aes(x= x, y= label)) + geom_point(size= 0.3) + geom_point(aes(color= label))
ggplot(trinary_df, aes(x= x, y= label)) + geom_point(size= 0.3) + geom_point(aes(color= label))
plot(k_number,accuracy_Bin, col='red', pch=19) + points(k_number, accuracy_Tri,col='red', pch=19)
plot(k_number,accuracy_Bin, col='red', pch=19)
points(k_number, accuracy_Tri,col='red', pch=19)
set.seed(12)
library(caret)
library(class)
## Binary classifier
training_Index=createDataPartition(binary_df$label, p=0.8)$Resample1
train_Binary= binary_df[training_Index,]
test_Binary= binary_df[-training_Index,]
k_number = c(3, 5, 10, 15, 20, 25)
accuracy_Bin <- c()
index = 0
for (i in k_number) {
index = index + 1
kModBin <- knn(train= train_Binary, test=test_Binary, cl=train_Binary$label, k=i )
accuracy_Bin[index] <- 100*sum(test_Binary$label == kModBin)/NROW(test_Binary$label)
}
#accuracy_df <- data.frame(k_number,accuracy_Bin)
## Trinary classifier
train_Index =createDataPartition(trinary_df$label, p=0.8)$Resample1
train_Trinary= trinary_df[train_Index,]
test_Trinary= trinary_df[-train_Index,]
accuracy_Tri <- c()
index = 0
for (i in k_number) {
index = index + 1
kModBin <- knn(train= train_Trinary, test=test_Trinary, cl=train_Trinary$label, k=i )
accuracy_Tri[index] <- 100*sum(test_Trinary$label == kModBin)/NROW(test_Trinary$label)
}
#accuracy_df <- cbind(accuracy_df,accuracy_Tri)
#head(accuracy_df)
plot(k_number,accuracy_Bin, col='red', pch=19)
points(k_number, accuracy_Tri,col='red', pch=19)
legend(1, 25, legend=c('Data 1', 'Data 2'), pch=c(19, 19), col=c('red', 'blue'))
set.seed(12)
library(caret)
library(class)
## Binary classifier
training_Index=createDataPartition(binary_df$label, p=0.8)$Resample1
train_Binary= binary_df[training_Index,]
test_Binary= binary_df[-training_Index,]
k_number = c(3, 5, 10, 15, 20, 25)
accuracy_Bin <- c()
index = 0
for (i in k_number) {
index = index + 1
kModBin <- knn(train= train_Binary, test=test_Binary, cl=train_Binary$label, k=i )
accuracy_Bin[index] <- 100*sum(test_Binary$label == kModBin)/NROW(test_Binary$label)
}
#accuracy_df <- data.frame(k_number,accuracy_Bin)
## Trinary classifier
train_Index =createDataPartition(trinary_df$label, p=0.8)$Resample1
train_Trinary= trinary_df[train_Index,]
test_Trinary= trinary_df[-train_Index,]
accuracy_Tri <- c()
index = 0
for (i in k_number) {
index = index + 1
kModBin <- knn(train= train_Trinary, test=test_Trinary, cl=train_Trinary$label, k=i )
accuracy_Tri[index] <- 100*sum(test_Trinary$label == kModBin)/NROW(test_Trinary$label)
}
#accuracy_df <- cbind(accuracy_df,accuracy_Tri)
#head(accuracy_df)
plot(k_number,accuracy_Bin, col='red', pch=19)
points(accuracy_Tri,col='red', pch=19)
legend(1, 25, legend=c('Data 1', 'Data 2'), pch=c(19, 19), col=c('red', 'blue'))
set.seed(12)
library(caret)
library(class)
## Binary classifier
training_Index=createDataPartition(binary_df$label, p=0.8)$Resample1
train_Binary= binary_df[training_Index,]
test_Binary= binary_df[-training_Index,]
k_number = c(3, 5, 10, 15, 20, 25)
accuracy_Bin <- c()
index = 0
for (i in k_number) {
index = index + 1
kModBin <- knn(train= train_Binary, test=test_Binary, cl=train_Binary$label, k=i )
accuracy_Bin[index] <- 100*sum(test_Binary$label == kModBin)/NROW(test_Binary$label)
}
accuracy_df <- data.frame(k_number,accuracy_Bin)
## Trinary classifier
train_Index =createDataPartition(trinary_df$label, p=0.8)$Resample1
train_Trinary= trinary_df[train_Index,]
test_Trinary= trinary_df[-train_Index,]
accuracy_Tri <- c()
index = 0
for (i in k_number) {
index = index + 1
kModBin <- knn(train= train_Trinary, test=test_Trinary, cl=train_Trinary$label, k=i )
accuracy_Tri[index] <- 100*sum(test_Trinary$label == kModBin)/NROW(test_Trinary$label)
}
accuracy_df <- cbind(accuracy_df,accuracy_Tri)
head(accuracy_df)
ggplot(accuracy_df, aes(x = k_number)) + geom_line(aes(y = accuracy_Bin), colour= "red") + geom_line(aes(y = accuracy_Tri))
ggplot(accuracy_df, aes(x = k_number)) + geom_point(aes(y = accuracy_Bin), colour= "red") + geom_point(aes(y = accuracy_Tri))
ggplot(accuracy_df, aes(x = k_number)) + geom_point(aes(y = accuracy_Bin), color= "red") + geom_point(aes(y = accuracy_Tri), color= "blue")
ggplot(accuracy_df, aes(x = k_number)) + geom_point(aes(y = accuracy_Bin), color= "red") + geom_point(aes(y = accuracy_Tri), color= "blue") + scale_color_manual("", breaks = c("accuracy_Bin", "accuracy_Tri"), values = c("accuracy_Bin" = "red", "accuracy_Tri" = "blue"))
ggplot(accuracy_df, aes(x = k_number)) + geom_point(aes(y = accuracy_Bin), color= "red") + geom_point(aes(y = accuracy_Tri), color= "blue") + scale_colour_manual("", breaks = c("accuracy_Bin", "accuracy_Tri"), values = c("accuracy_Bin" = "red", "accuracy_Tri" = "blue"))
ggplot(accuracy_df, aes(x = k_number)) +
geom_point(aes(y = accuracy_Bin), color= "red") +
geom_point(aes(y = accuracy_Tri), color= "blue") +
scale_colour_manual("",
breaks = c("accuracy_Bin", "accuracy_Tri"),
values = c("accuracy_Bin" = "red", "accuracy_Tri" = "blue")
)
ggplot(accuracy_df, aes(x = k_number)) +
geom_point(aes(y = accuracy_Bin), color= "red") +
geom_point(aes(y = accuracy_Tri), color= "blue") +
scale_colour_manual("",
breaks = c("accuracy_Bin", "accuracy_Tri"),
values = c("accuracy_Bin" = "red", "accuracy_Tri" = "blue")
) + xlab(" ")
ggplot(accuracy_df, aes(x = k_number)) +
geom_point(aes(y = accuracy_Bin), color= "red") +
geom_point(aes(y = accuracy_Tri), color= "blue") +
scale_colour_manual("",
breaks = c("accuracy_Bin", "accuracy_Tri"),
values = c("accuracy_Bin" = "red", "accuracy_Tri" = "blue")
) + xlab("K values") + ylab("Accuracy")
ggplot(accuracy_df, aes(x = k_number)) +
geom_line(aes(y = accuracy_Bin), color= "red") +
geom_line(aes(y = accuracy_Tri), color= "blue") +
scale_colour_manual("",
breaks = c("accuracy_Bin", "accuracy_Tri"),
values = c("accuracy_Bin" = "red", "accuracy_Tri" = "blue")
) + xlab("K values") + ylab("Accuracy")
ggplot(accuracy_df, aes(x = k_number)) +
geom_point(aes(y = accuracy_Bin), color= "red") +
geom_point(aes(y = accuracy_Tri), color= "blue") +
scale_colour_manual("",
breaks = c("accuracy_Bin", "accuracy_Tri"),
values = c("accuracy_Bin" = "red", "accuracy_Tri" = "blue")
) + xlab("K values") + ylab("Accuracy")
ggplot(accuracy_df, aes(x = k_number)) +
geom_point(aes(y = accuracy_Bin), colour= "red") +
geom_point(aes(y = accuracy_Tri), colour= "blue") +
scale_colour_manual("",
breaks = c("accuracy_Bin", "accuracy_Tri"),
values = c("accuracy_Bin" = "red", "accuracy_Tri" = "blue")
) + xlab("K values") + ylab("Accuracy")
ggplot(accuracy_df, aes(x = k_number)) +
geom_point(aes(y = accuracy_Bin), colour= "red") +
geom_point(aes(y = accuracy_Tri), colour= "blue") +
scale_colour_manual("",
breaks = c("accuracy_Bin", "accuracy_Tri"),
values = c("accuracy_Bin" = "red", "accuracy_Tri" = "blue")
) + xlab("K values") + ylab("Accuracy") +
scale_y_continuous("Temperatura (C)", limits = c(-10,40))
ggplot(accuracy_df, aes(x = k_number)) +
geom_point(aes(y = accuracy_Bin), colour= "red") +
geom_point(aes(y = accuracy_Tri), colour= "blue") +
scale_colour_manual("",
breaks = c("accuracy_Bin", "accuracy_Tri"),
values = c("accuracy_Bin" = "red", "accuracy_Tri" = "blue")
) + xlab("K values") + ylab("Accuracy")
ggplot(accuracy_df, aes(x = k_number)) +
geom_point(aes(y = accuracy_Bin), colour= "red") +
geom_point(aes(y = accuracy_Tri), colour= "blue") +
scale_colour_manual("",
breaks = c("accuracy_Bin", "accuracy_Tri"),
values = c("accuracy_Bin" = "red", "accuracy_Tri" = "blue")
) + xlab("K values") + ylab("Accuracy") +
scale_y_continuous("Temperatura (C)", limits = c(90,99))
ggplot(accuracy_df, aes(x = k_number)) +
geom_point(aes(y = accuracy_Bin, colour= "red")) +
geom_point(aes(y = accuracy_Tri, colour= "blue")) +
scale_colour_manual("",
breaks = c("accuracy_Bin", "accuracy_Tri"),
values = c("accuracy_Bin" = "red", "accuracy_Tri" = "blue")
) + xlab("K values") + ylab("Accuracy") +
scale_y_continuous("Temperatura (C)", limits = c(90,99))
ggplot(accuracy_df, aes(x = k_number)) +
geom_point(aes(y = accuracy_Bin, colour= "accuracy_Bin")) +
geom_point(aes(y = accuracy_Tri, colour= "accuracy_Tri")) +
scale_colour_manual("",
breaks = c("accuracy_Bin", "accuracy_Tri"),
values = c("accuracy_Bin" = "red", "accuracy_Tri" = "blue")
) + xlab("K values") + ylab("Accuracy") +
scale_y_continuous("Temperatura (C)", limits = c(90,99))
library(tidyverse)
binary_df <- read.csv("binary-classifier-data.csv")
trinary_df <- read.csv("trinary-classifier-data.csv")
ggplot(binary_df, aes(x= x, y= label)) + geom_point(size= 0.1) + geom_point(aes(color= label))
ggplot(trinary_df, aes(x= x, y= label)) + geom_point(size= 0.1) + geom_point(aes(color= label))
set.seed(12)
library(caret)
library(class)
## Binary classifier
training_Index=createDataPartition(binary_df$label, p=0.8)$Resample1
train_Binary= binary_df[training_Index,]
test_Binary= binary_df[-training_Index,]
k_number = c(3, 5, 10, 15, 20, 25)
accuracy_Bin <- c()
index = 0
for (i in k_number) {
index = index + 1
kModBin <- knn(train= train_Binary, test=test_Binary, cl=train_Binary$label, k=i )
accuracy_Bin[index] <- 100*sum(test_Binary$label == kModBin)/NROW(test_Binary$label)
}
accuracy_df <- data.frame(k_number,accuracy_Bin)
## Trinary classifier
train_Index =createDataPartition(trinary_df$label, p=0.8)$Resample1
train_Trinary= trinary_df[train_Index,]
test_Trinary= trinary_df[-train_Index,]
accuracy_Tri <- c()
index = 0
for (i in k_number) {
index = index + 1
kModBin <- knn(train= train_Trinary, test=test_Trinary, cl=train_Trinary$label, k=i )
accuracy_Tri[index] <- 100*sum(test_Trinary$label == kModBin)/NROW(test_Trinary$label)
}
accuracy_df <- cbind(accuracy_df,accuracy_Tri)
head(accuracy_df)
ggplot(accuracy_df, aes(x = k_number)) +
geom_point(aes(y = accuracy_Bin, colour= "accuracy_Bin")) +
geom_point(aes(y = accuracy_Tri, colour= "accuracy_Tri")) +
scale_colour_manual("",
breaks = c("accuracy_Bin", "accuracy_Tri"),
values = c("accuracy_Bin" = "red", "accuracy_Tri" = "blue")
) + xlab("K values") + ylab("Accuracy") +
scale_y_continuous("Accuracy", limits = c(90,99))
library(tidyverse)
binary_df <- read.csv("binary-classifier-data.csv")
trinary_df <- read.csv("trinary-classifier-data.csv")
ggplot(binary_df, aes(x= x, y= label)) + geom_point(size= 0.02) + geom_point(aes(color= label))
library(tidyverse)
binary_df <- read.csv("binary-classifier-data.csv")
trinary_df <- read.csv("trinary-classifier-data.csv")
ggplot(binary_df, aes(x= x, y= label)) + geom_point(size= 0.5) + geom_point(aes(color= label))
library(tidyverse)
binary_df <- read.csv("binary-classifier-data.csv")
trinary_df <- read.csv("trinary-classifier-data.csv")
ggplot(binary_df, aes(x= x, y= label)) + geom_point(size= 0.005) + geom_point(aes(color= label))
cluster_df <- read.csv("clustering-data.csv")
cluster_df <- read.csv("clustering-data.csv")
head(cluster_df)
cluster_df <- read.csv("clustering-data.csv")
str(cluster_df)
cluster_df <- read.csv("clustering-data.csv")
ggplot(cluster_df, aes(x= x, y= y)) + geom_point()
cluster_df <- read.csv("clustering-data.csv")
ggplot(cluster_df, aes(x= x, y= y)) + geom_point(size= 0.1)
cluster_df <- read.csv("clustering-data.csv")
ggplot(cluster_df, aes(x= x, y= y)) + geom_point(size= 0.01)
library(tidyverse)
binary_df <- read.csv("binary-classifier-data.csv")
trinary_df <- read.csv("trinary-classifier-data.csv")
library(tidyverse)
binary_df <- read.csv("binary-classifier-data.csv")
trinary_df <- read.csv("trinary-classifier-data.csv")
ggplot(binary_df, aes(x= x, y= label)) + geom_point(size= 0.1) + geom_point(aes(color= label))
set.seed(195)
for (i in 2:12){
KM_cluster <- kmeans(cluster_df, centers = i)
autoplot(KM_cluster, cluster_df, frame = TRUE)
}
set.seed(195)
library(ggplot2)
for (i in 2:12){
KM_cluster <- kmeans(cluster_df, centers = i)
autoplot(KM_cluster, cluster_df, frame = TRUE)
}
KM_cluster <- kmeans(cluster_df, centers = 2)
autoplot(KM_cluster, cluster_df, frame = TRUE)
library(ggplot2)
library(dplyr)
KM_cluster <- kmeans(cluster_df, centers = 2)
autoplot(KM_cluster, cluster_df, frame = TRUE)
library(ggplot2)
library(dplyr)
library(ggfortify)
install.packages("ggfortify")
library(ggplot2)
library(dplyr)
library(ggfortify)
KM_cluster <- kmeans(cluster_df, centers = 2)
autoplot(KM_cluster, cluster_df, frame = TRUE)
install.packages("ggfortify")
#library(ggplot2)
library(ggfortify)
KM_cluster <- kmeans(cluster_df, centers = 2)
autoplot(KM_cluster, cluster_df, frame = TRUE)
install.packages("ggfortify")
#library(ggplot2)
library(ggfortify)
KM_cluster <- kmeans(cluster_df, centers = 2)
autoplot(KM_cluster, cluster_df, frame = TRUE)
library(ggfortify)
set.seed(195)
library(ggplot2)
library(dplyr)
for (i in 2:12){
KM_cluster <- kmeans(cluster_df, centers = i)
autoplot(KM_cluster, cluster_df, frame = TRUE)
}
library(ggfortify)
set.seed(195)
library(ggplot2)
library(dplyr)
for (i in 2:12){
KM_cluster <- kmeans(cluster_df, centers = i)
autoplot(KM_cluster, cluster_df, frame = TRUE)
}
library(ggfortify)
set.seed(195)
library(ggplot2)
library(dplyr)
for (i in 2:12){
print(i)
KM_cluster <- kmeans(cluster_df, centers = i)
autoplot(KM_cluster, cluster_df, frame = TRUE)
}
library(ggfortify)
set.seed(195)
library(ggplot2)
library(dplyr)
for (i in 2:12){
KM_cluster <- kmeans(cluster_df,i)
autoplot(KM_cluster, cluster_df, frame = TRUE)
}
library(ggfortify)
set.seed(195)
library(ggplot2)
library(dplyr)
for (i in 2:12){
KM_cluster <- kmeans(cluster_df,i)
print(autoplot(KM_cluster, cluster_df, frame = TRUE))
}
library(ggfortify)
set.seed(195)
library(ggplot2)
library(dplyr)
for (i in 2:3){
KM_cluster <- kmeans(cluster_df,i)
cat(stringf("Cluster plot with k = %f",i))
print(autoplot(KM_cluster, cluster_df, frame = TRUE))
}
library(ggfortify)
set.seed(195)
library(ggplot2)
library(dplyr)
for (i in 2:3){
KM_cluster <- kmeans(cluster_df,i)
print(paste("Cluster plot with k = ",i))
print(autoplot(KM_cluster, cluster_df, frame = TRUE))
}
install.packages("factoextra")
library(factoextra)
fviz_nbclusta(cluster_df, kmeans, method= "wss") + labs(subtitle = "Elbow method")
library(factoextra)
fviz_nbclust(cluster_df, kmeans, method= "wss") + labs(subtitle = "Elbow method")
set.seed(195)
library(ggfortify)
library(ggplot2)
for (i in 2:12){
KM_cluster <- kmeans(cluster_df,i, nstart = 25)
print(autoplot(KM_cluster, cluster_df, frame = TRUE))
print(paste("Cluster plot with k = ",i))
}
cluster_df <- read.csv("clustering-data.csv")
plot(cluster_df$x, cluster_df$y, pch= 19)
#ggplot(cluster_df, aes(x= x, y= y)) + geom_point(size= 0.01)
cluster_df <- read.csv("clustering-data.csv")
ggplot(cluster_df, aes(x= y, y= x)) + geom_point(size= 0.01)
cluster_df <- read.csv("clustering-data.csv")
ggplot(cluster_df, aes(x= x)) + geom_point(size= 0.01)
cluster_df <- read.csv("clustering-data.csv")
ggplot(cluster_df, aes(x= x, y= y)) + geom_point(size= 0.01)
?dist
?dist
print(kmeans(cluster_df,3, nstart = 5))
kmeans(cluster_df,12, nstart = 25)
kmeans(cluster_df,12, nstart = 25)$Center
k_mean <- kmeans(cluster_df,12, nstart = 25)
k_mean$Center
k_mean <- kmeans(cluster_df,12, nstart = 25)
k_mean$centers
k_mean <- kmeans(cluster_df,12, nstart = 25)
k_mean
k_mean <- kmeans(cluster_df,12, nstart = 25)
k_mean$centers
k_mean <- kmeans(cluster_df,12, nstart = 25)
k_mean

install.packages("foreign")
getwd()
df <- read.arff("ThoraricSurgery.arff")
library(foreign)
df <- read.arff("ThoraricSurgery.arff")
library(foreign)
df <- read.arff("ThoraricSurgery.arff")
View(df)
library(foreign)
df <- read.arff("ThoraricSurgery.arff")
df_split <- sample.split(df, SplitRation = 0.8)
install.packages("caTools")
library(foreign)
library(caTools)
df <- read.arff("ThoraricSurgery.arff")
df_split <- sample.split(df, SplitRation = 0.8)
library(foreign)
library(caTools)
df <- read.arff("ThoraricSurgery.arff")
df_split <- sample.split(df, SplitRatio = 0.8)
train_data <- subset(df, split == "TRUE")
library(foreign)
library(caTools)
df <- read.arff("ThoraricSurgery.arff")
df_split <- sample.split(df, SplitRatio = 0.8)
train_data <- subset(df, split == "TRUE")
library(foreign)
library(caTools)
df <- read.arff("ThoraricSurgery.arff")
df_split <- sample.split(df, SplitRatio = 0.8)
train_data <- df[spl == TRUE, ]
library(foreign)
library(caTools)
df <- read.arff("ThoraricSurgery.arff")
df_split <- sample.split(df, SplitRatio = 0.8)
train_data <- df[split == TRUE, ]
library(foreign)
library(caTools)
df <- read.arff("ThoraricSurgery.arff")
df_split <- sample.split(df, SplitRatio = 0.8)
train_data <- subset(df, split == 1)
library(foreign)
library(caTools)
df <- read.arff("ThoraricSurgery.arff")
df_split <- sample.split(df, SplitRatio = 0.8)
train_data <- subset(df, split == "T")
library(foreign)
library(caTools)
df <- read.arff("ThoraricSurgery.arff")
df_split <- sample.split(df, SplitRatio = 0.8)
train_data <- subset(df, split == "T")
library(foreign)
library(caTools)
df <- read.arff("ThoraricSurgery.arff")
df_split <- sample.split(df, SplitRatio = 0.8)
View(df)
train_data <- subset(df, split == "TRUE")
library(foreign)
library(caTools)
df <- read.arff("ThoraricSurgery.arff")
df_split <- sample.split(df, SplitRatio = 0.8)
train_data <- subset(df, split == "T")
library(foreign)
library(caTools)
df <- read.arff("ThoraricSurgery.arff")
df_split <- sample.split(df, SplitRatio = 0.8)
train_data <- subset(df, split == 0)
library(foreign)
library(caTools)
df <- read.arff("ThoraricSurgery.arff")
df_split <- sample.split(df, SplitRatio = 0.8)
train_data <- subset(df, split == 1)
library(foreign)
library(caTools)
df <- read.arff("ThoraricSurgery.arff")
df_split <- sample.split(df, SplitRatio = 0.8)
train_data <- subset(df, split_data == "TRUE")
library(foreign)
library(caTools)
df <- read.arff("ThoraricSurgery.arff")
df_split <- sample.split(df, SplitRatio = 0.8)
train_data <- subset(df, split == TRUE)
library(foreign)
library(caTools)
df <- read.arff("ThoraricSurgery.arff")
df_split <- sample.split(df, SplitRatio = 0.8)
train_data <- subset(df, split_data == TRUE)
library(foreign)
library(caret)
df <- read.arff("ThoraricSurgery.arff")
df_split <- sample.split(df, SplitRatio = 0.8)
train_data <- subset(df, df_split == TRUE)
test_data <- subset(df, split == "F")
library(foreign)
library(caTools)
df <- read.arff("ThoraricSurgery.arff")
df_split <- sample.split(df, SplitRatio = 0.8)
train_data <- subset(df, df_split == "TRUE")
test_data <- subset(df, df_split == "F")
binary_log_regression <- glm(Risk1Yr~ DGN + PRE4 + PRE5 + PRE6 +PRE7 + PRE8 + PRE9 + PRE10 + PRE11 + PRE14 + PRE17 + PRE19 + PRE25 + PRE30 + PRE32, data = df, family = binomial())
summary(binary_log_regression)
glm_test_Pred <- predict(binary_log_regression, test, type = "response")
glm_test_Pred <- predict(binary_log_regression, test_data, type = "response")
library(foreign)
library(caTools)
df <- read.arff("ThoraricSurgery.arff")
df_split <- sample.split(df, SplitRatio = 0.8)
train_data <- subset(df, df_split == "TRUE")
test_data <- subset(df, df_split == "FALSE")
binary_log_regression <- glm(Risk1Yr~ DGN + PRE4 + PRE5 + PRE6 +PRE7 + PRE8 + PRE9 + PRE10 + PRE11 + PRE14 + PRE17 + PRE19 + PRE25 + PRE30 + PRE32, data = df, family = binomial())
summary(binary_log_regression)
glm_test_Pred <- predict(binary_log_regression, test_data, type = "response")
glm_train_pred <- predict(binary_log_regression, train_data, type = "response")
glm_test_Pred <- predict(binary_log_regression, test_data, type = "response")
glm_train_pred <- predict(binary_log_regression, train_data, type = "response")
confusion_matrix <- table(true_val = train_data$Risk1Yr, predicted_val = glm_train_pred > 0.5)
glm_test_Pred <- predict(binary_log_regression, test_data, type = "response")
glm_train_pred <- predict(binary_log_regression, train_data, type = "response")
confusion_matrix <- table(true_val = train_data$Risk1Yr,
predicted_val = glm_train_pred > 0.5)
(confusion_matrix[[1,1]] + confusion_matrix[[2,2]])/sum(confusion_matrix)
